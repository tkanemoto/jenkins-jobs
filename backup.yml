#
# Sync file system files using rsync
#
- defaults:
    name: sync-defaults
    rsync: rsync
    logrotate:
      numToKeep: 100

#
# Unix
#
- job-group:
    name: sync
    defaults: sync-defaults
    all-options: -hv --progress --stats {options}
    jobs:
      - 'sync-{name}-{source-host}'

- job-template:
    name: 'sync-{name}-{source-host}'
    display-name: 'Sync {name} : {source-host}   ⟶   {target}'
    node: '{source-host}'
    defaults: sync-defaults
    disabled: '{obj:disabled}'

    triggers:
      - timed: '{trigger}'

    builders:
      - shell: |
          #!/bin/bash -ex
          if [ -e /usr/local/opt/coreutils/libexec/gnubin/stdbuf ] ; then
            export PATH=/usr/local/opt/coreutils/libexec/gnubin/:$PATH
          fi
          IFS=","
          for dir in "{source-dirs}" ; do
            if [ -n "$GDRIVE_ID" ] ; then
              /usr/local/bin/gdrive sync upload "$dir" $GDRIVE_ID
            fi
            {rsync} \
              "$dir" "{target}" \
              --exclude .DS_Store \
              --exclude *-V100 \
              --exclude .TemporaryItems \
              --exclude .fseventsd \
              --exclude *.crdownload \
              --exclude ._* \
              --exclude .AppleDouble \
              {all-options} \
            | stdbuf -oL tr '\r' '\n'
          done

    publishers:
      - email:
          recipients: '{recipients}'

      - description-setter:
          regexp: 'sent .* bytes  .*'


#
# Windows
#
- job-group:
    name: sync-win
    defaults: sync-defaults
    jobs:
      - 'sync-drivefs-{name}-{folder}-{source-host}'

- job-template:
    name: 'sync-drivefs-{name}-{folder}-{source-host}'
    display-name: 'Sync DriveFS {name} » {folder} : {source-host}   ⟶   {target}'
    node: '{source-host}'
    defaults: sync-defaults

    triggers:
      - timed: '{trigger}'

    builders:
      - batch: |
          robocopy /s "{source}{folder}" "{target}{folder}" ^
            /COPY:DT /DCOPY:DT ^
            {options} ^
            /XO ^
            /XD .AppleDouble ^
            /XF .DS_Store ^
            /XD .Trashes ^
            /XD .Trash ^
            /XD $RECYCLE.BIN ^
            /XD *-V100 ^
            /XD .TemporaryItems ^
            /XD .fseventsd ^
            /XF *.crdownload ^
            /XF ._* ^
            /XF desktop.ini ^
            /XD "Application Data"
          IF %ERRORLEVEL% EQU 0 EXIT 0
          IF %ERRORLEVEL% EQU 1 EXIT 0
          IF %ERRORLEVEL% EQU 2 EXIT 0
          IF %ERRORLEVEL% EQU 3 EXIT 0

    publishers:
      - email:
          recipients: '{recipients}'

      - description-setter:
          regexp: "Bytes : (.*)$"
          description: '<pre>\1</pre>'
          regexp-for-failed: "Bytes : (.*)$"
          description-for-failed: '<pre>\1</pre>'

#
# Organize TV episodes
#
- job-template:
    name: 'organize-episodes-{host}-{name}'
    display-name: 'Organize Episodes : {host} {name}'
    node: '{host}'
    defaults: sync-defaults

    triggers:
      - timed: '{trigger}'

    builders:
      - shell: |
          #!/bin/bash -ex
          (
            cd python-mlib
            git fetch
            git reset --hard origin/master
          ) || {{
            rm -rf python-mlib
            git clone https://github.com/tkanemoto/python-mlib
          }}

      - shell: |
          #!/bin/bash -ex
          virtualenv .env
          source .env/bin/activate
          pip install -r python-mlib/requirements.txt
          cd {library-dir}
          $WORKSPACE/python-mlib/mlib.py organise_movies -v3 --traceback \
            {args} {search-dir}

    publishers:
      - email:
          recipients: '{recipients}'

      - description-setter:
          regexp: "Transferred .* failed .* out of .*"
          regexp-for-failed: "Transferred .* failed .* out of .*"

#
# Do some clean up
#
- job-template:
    name: 'cleanup-{host}-{name}'
    display-name: 'Clean-up : {host} {name}'
    node: '{host}'
    default: sync-defaults

    triggers:
      - timed: '{trigger}'

    builders:
      - shell: |
          #!/bin/bash -ex
          find "{search-dir}" -type d -exec du -sb "{{}}" \; | while read line ; do
            echo $line
            bytes=`echo $line | awk '{{print $1}}'`
            name=`echo $line | sed -r 's/^[0-9]+ //'`
            if [ $bytes -lt 20000000 ] ; then
              echo "Removing $name"
              rm -rfv "$name"
            fi
          done
